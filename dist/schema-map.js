'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pgFormat = require('pg-format');

var _pgFormat2 = _interopRequireDefault(_pgFormat);

var _wellknown = require('wellknown');

var _wellknown2 = _interopRequireDefault(_wellknown);

var _fulcrumDesktopPlugin = require('fulcrum-desktop-plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SchemaMap {
  // * force 2d
  // * remove duplicate vertices
  static geomFromGeoJSON(geojsonGeometry) {
    if (geojsonGeometry == null) {
      return null;
    }

    return `ST_RemoveRepeatedPoints(ST_Force2D(ST_GeomFromText(${(0, _pgFormat2.default)('%L', _wellknown2.default.stringify(geojsonGeometry))}, 4326)))`;
  }

  // * force to multi
  // * force 2d
  // * remove duplicate vertices
  static multiGeomFromGeoJSON(geojsonGeometry) {
    if (geojsonGeometry == null) {
      return null;
    }

    return `ST_RemoveRepeatedPoints(ST_Force2D(ST_Multi(ST_GeomFromText(${(0, _pgFormat2.default)('%L', _wellknown2.default.stringify(geojsonGeometry))}, 4326))))`;
  }

  static geometry(latitude, longitude) {
    return { raw: this.geomFromGeoJSON({ type: 'Point', coordinates: [+longitude, +latitude] }) };
  }

  static trackGeometry(trackJSON) {
    if (trackJSON) {
      const track = new _fulcrumDesktopPlugin.core.Track('video', trackJSON);

      const geoJSON = track.toGeoJSONMultiLineString();

      if (geoJSON && geoJSON.geometry && geoJSON.geometry.coordinates.length && geoJSON.geometry.coordinates[0].length > 1) {
        return { raw: this.multiGeomFromGeoJSON(geoJSON) };
      }
    }

    return null;
  }

  static photo(row) {
    const hasLocation = row._latitude != null && row._longitude != null;

    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      access_key: row.id,
      record_id: row._recordRowID,
      record_resource_id: row._recordID,
      form_id: row._formRowID,
      form_resource_id: row._formID,
      exif: row._exif ? JSON.stringify(row._exif) : null,
      file_size: row._fileSize,
      created_by_id: row._createdByRowID,
      created_by_resource_id: row._createdByID,
      updated_by_id: row._updatedByRowID,
      updated_by_resource_id: row._updatedByID,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      file: row._filePath,
      content_type: row._contentType,
      is_uploaded: row._isUploaded,
      is_stored: row._isStored,
      is_processed: row._isProcessed,
      geometry: hasLocation ? this.geometry(row._latitude, row._longitude) : null,
      latitude: hasLocation ? row._latitude : null,
      longitude: hasLocation ? row._longitude : null,
      altitude: row._altitude,
      direction: row._direction,
      accuracy: row._accuracy,
      width: row._width,
      height: row._height,
      make: row._make,
      model: row._model,
      software: row._software,
      date_time: row._dateTime
    };
  }

  static video(row) {
    return {
      row_id: row._rowID,
      row_resource_id: row.id,
      access_key: row.id,
      record_id: row._recordRowID,
      record_resource_id: row._recordID,
      form_id: row._formRowID,
      form_resource_id: row._formID,
      metadata: row._metadata,
      has_track: row._hasTrack,
      track: row._trackJSON,
      file_size: row._fileSize,
      created_by_id: row._createdByRowID,
      created_by_resource_id: row._createdByID,
      updated_by_id: row._updatedByRowID,
      updated_by_resource_id: row._updatedByID,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      file: row._filePath,
      content_type: row._contentType,
      is_uploaded: row._isUploaded,
      is_stored: row._isStored,
      is_processed: row._isProcessed,
      geometry: this.trackGeometry(row._trackJSON),
      width: row._width,
      height: row._height,
      duration: row._duration,
      bit_rate: row._bitRate
    };
  }

  static audio(row) {
    return {
      row_id: row._rowID,
      row_resource_id: row.id,
      access_key: row.id,
      record_id: row._recordRowID,
      record_resource_id: row._recordID,
      form_id: row._formRowID,
      form_resource_id: row._formID,
      metadata: row._metadata,
      has_track: row._hasTrack,
      track: row._trackJSON,
      file_size: row._fileSize,
      created_by_id: row._createdByRowID,
      created_by_resource_id: row._createdByID,
      updated_by_id: row._updatedByRowID,
      updated_by_resource_id: row._updatedByID,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      file: row._filePath,
      content_type: row._contentType,
      is_uploaded: row._isUploaded,
      is_stored: row._isStored,
      is_processed: row._isProcessed,
      geometry: this.trackGeometry(row._trackJSON),
      duration: row._duration,
      bit_rate: row._bitRate
    };
  }

  static changeset(row) {
    const geometry = this.geomFromGeoJSON(row.boundingBoxAsGeoJSON);

    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      form_id: row._formRowID,
      form_resource_id: row._formID,
      metadata: row._metadata,
      closed_at: row._closedAt,
      created_by_id: row._createdByRowID,
      created_by_resource_id: row._createdByID,
      updated_by_id: row._updatedByRowID,
      updated_by_resource_id: row._updatedByID,
      closed_by_id: row._closedByRowID,
      closed_by_resource_id: row._closedByID,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      min_lat: row._minLat,
      max_lat: row._maxLat,
      min_lon: row._minLon,
      max_lon: row._maxLon,
      number_of_changes: row._numberOfChanges,
      number_of_creates: row._numberOfCreates,
      number_of_updates: row._numberOfUpdated,
      number_of_deletes: row._numberOfDeletes,
      metadata_index_text: row._metadataIndexText,
      metadata_index: { raw: `to_tsvector(${(0, _pgFormat2.default)('%L', row._metadataIndexText)})` },
      bounding_box: geometry ? { raw: this.geomFromGeoJSON(row.boundingBoxAsGeoJSON) } : null
    };
  }

  static choiceList(row) {
    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      name: row._name,
      description: row._description,
      version: row._version,
      items: row._choicesJSON,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      deleted_at: row._deletedAt
    };
  }

  static classificationSet(row) {
    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      name: row._name,
      description: row._description,
      version: row._version,
      items: row._itemsJSON,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      deleted_at: row._deletedAt
    };
  }

  static form(row) {
    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      name: row._name,
      description: row._description,
      version: row._version,
      elements: row._elements,
      status: row._status,
      status_field: row._statusFieldJSON,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      deleted_at: row._deletedAt,
      auto_assign: row._autoAssign,
      title_field_keys: row._titleFieldKeys,
      hidden_on_dashboard: row._hiddenOnDashboard,
      geometry_types: row._geometryTypes,
      geometry_required: row._geometryRequired,
      script: row._script,
      image: row._image,
      projects_enabled: !!row._projectEnabled,
      assignment_enabled: !!row._assignmentEnabled
    };
  }

  static project(row) {
    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      name: row._name,
      description: row._description,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      deleted_at: row._deletedAt
    };
  }

  static role(row) {
    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      name: row._name,
      description: row._description,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      deleted_at: row._deletedAt,
      is_system: row._isSystem,
      is_default: row._isDefault,
      can_manage_subscription: row.canManageSubscription,
      can_update_organization: row.canUpdateOrganization,
      can_manage_members: row.canManageMembers,
      can_manage_roles: row.canManageRoles,
      can_manage_apps: row.canManageApps,
      can_manage_projects: row.canManageProjects,
      can_manage_choice_lists: row.canManageChoiceLists,
      can_manage_classification_sets: row.canManageClassificationSets,
      can_create_records: row.canCreateRecords,
      can_update_records: row.canUpdateRecords,
      can_delete_records: row.canDeleteRecords,
      can_change_status: row.canChangeStatus,
      can_change_project: row.canChangeProject,
      can_assign_records: row.canAssignRecords,
      can_import_records: row.canImportRecords,
      can_export_records: row.canExportRecords,
      can_run_reports: row.canRunReports
    };
  }

  static membership(row) {
    return {
      row_id: row.rowID,
      row_resource_id: row.id,
      user_resource_id: row._userID,
      first_name: row._firstName,
      last_name: row._lastName,
      name: (row._firstName || '') + ' ' + (row._lastName || ''),
      email: row._email,
      role_id: row._roleRowID,
      role_resource_id: row._roleID,
      status: row.status,
      created_at: row._createdAt,
      updated_at: row._updatedAt,
      deleted_at: row._deletedAt
    };
  }
}
exports.default = SchemaMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NjaGVtYS1tYXAuanMiXSwibmFtZXMiOlsiU2NoZW1hTWFwIiwiZ2VvbUZyb21HZW9KU09OIiwiZ2VvanNvbkdlb21ldHJ5Iiwic3RyaW5naWZ5IiwibXVsdGlHZW9tRnJvbUdlb0pTT04iLCJnZW9tZXRyeSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwicmF3IiwidHlwZSIsImNvb3JkaW5hdGVzIiwidHJhY2tHZW9tZXRyeSIsInRyYWNrSlNPTiIsInRyYWNrIiwiVHJhY2siLCJnZW9KU09OIiwidG9HZW9KU09OTXVsdGlMaW5lU3RyaW5nIiwibGVuZ3RoIiwicGhvdG8iLCJyb3ciLCJoYXNMb2NhdGlvbiIsIl9sYXRpdHVkZSIsIl9sb25naXR1ZGUiLCJyb3dfaWQiLCJyb3dJRCIsInJvd19yZXNvdXJjZV9pZCIsImlkIiwiYWNjZXNzX2tleSIsInJlY29yZF9pZCIsIl9yZWNvcmRSb3dJRCIsInJlY29yZF9yZXNvdXJjZV9pZCIsIl9yZWNvcmRJRCIsImZvcm1faWQiLCJfZm9ybVJvd0lEIiwiZm9ybV9yZXNvdXJjZV9pZCIsIl9mb3JtSUQiLCJleGlmIiwiX2V4aWYiLCJKU09OIiwiZmlsZV9zaXplIiwiX2ZpbGVTaXplIiwiY3JlYXRlZF9ieV9pZCIsIl9jcmVhdGVkQnlSb3dJRCIsImNyZWF0ZWRfYnlfcmVzb3VyY2VfaWQiLCJfY3JlYXRlZEJ5SUQiLCJ1cGRhdGVkX2J5X2lkIiwiX3VwZGF0ZWRCeVJvd0lEIiwidXBkYXRlZF9ieV9yZXNvdXJjZV9pZCIsIl91cGRhdGVkQnlJRCIsImNyZWF0ZWRfYXQiLCJfY3JlYXRlZEF0IiwidXBkYXRlZF9hdCIsIl91cGRhdGVkQXQiLCJmaWxlIiwiX2ZpbGVQYXRoIiwiY29udGVudF90eXBlIiwiX2NvbnRlbnRUeXBlIiwiaXNfdXBsb2FkZWQiLCJfaXNVcGxvYWRlZCIsImlzX3N0b3JlZCIsIl9pc1N0b3JlZCIsImlzX3Byb2Nlc3NlZCIsIl9pc1Byb2Nlc3NlZCIsImFsdGl0dWRlIiwiX2FsdGl0dWRlIiwiZGlyZWN0aW9uIiwiX2RpcmVjdGlvbiIsImFjY3VyYWN5IiwiX2FjY3VyYWN5Iiwid2lkdGgiLCJfd2lkdGgiLCJoZWlnaHQiLCJfaGVpZ2h0IiwibWFrZSIsIl9tYWtlIiwibW9kZWwiLCJfbW9kZWwiLCJzb2Z0d2FyZSIsIl9zb2Z0d2FyZSIsImRhdGVfdGltZSIsIl9kYXRlVGltZSIsInZpZGVvIiwiX3Jvd0lEIiwibWV0YWRhdGEiLCJfbWV0YWRhdGEiLCJoYXNfdHJhY2siLCJfaGFzVHJhY2siLCJfdHJhY2tKU09OIiwiZHVyYXRpb24iLCJfZHVyYXRpb24iLCJiaXRfcmF0ZSIsIl9iaXRSYXRlIiwiYXVkaW8iLCJjaGFuZ2VzZXQiLCJib3VuZGluZ0JveEFzR2VvSlNPTiIsImNsb3NlZF9hdCIsIl9jbG9zZWRBdCIsImNsb3NlZF9ieV9pZCIsIl9jbG9zZWRCeVJvd0lEIiwiY2xvc2VkX2J5X3Jlc291cmNlX2lkIiwiX2Nsb3NlZEJ5SUQiLCJtaW5fbGF0IiwiX21pbkxhdCIsIm1heF9sYXQiLCJfbWF4TGF0IiwibWluX2xvbiIsIl9taW5Mb24iLCJtYXhfbG9uIiwiX21heExvbiIsIm51bWJlcl9vZl9jaGFuZ2VzIiwiX251bWJlck9mQ2hhbmdlcyIsIm51bWJlcl9vZl9jcmVhdGVzIiwiX251bWJlck9mQ3JlYXRlcyIsIm51bWJlcl9vZl91cGRhdGVzIiwiX251bWJlck9mVXBkYXRlZCIsIm51bWJlcl9vZl9kZWxldGVzIiwiX251bWJlck9mRGVsZXRlcyIsIm1ldGFkYXRhX2luZGV4X3RleHQiLCJfbWV0YWRhdGFJbmRleFRleHQiLCJtZXRhZGF0YV9pbmRleCIsImJvdW5kaW5nX2JveCIsImNob2ljZUxpc3QiLCJuYW1lIiwiX25hbWUiLCJkZXNjcmlwdGlvbiIsIl9kZXNjcmlwdGlvbiIsInZlcnNpb24iLCJfdmVyc2lvbiIsIml0ZW1zIiwiX2Nob2ljZXNKU09OIiwiZGVsZXRlZF9hdCIsIl9kZWxldGVkQXQiLCJjbGFzc2lmaWNhdGlvblNldCIsIl9pdGVtc0pTT04iLCJmb3JtIiwiZWxlbWVudHMiLCJfZWxlbWVudHMiLCJzdGF0dXMiLCJfc3RhdHVzIiwic3RhdHVzX2ZpZWxkIiwiX3N0YXR1c0ZpZWxkSlNPTiIsImF1dG9fYXNzaWduIiwiX2F1dG9Bc3NpZ24iLCJ0aXRsZV9maWVsZF9rZXlzIiwiX3RpdGxlRmllbGRLZXlzIiwiaGlkZGVuX29uX2Rhc2hib2FyZCIsIl9oaWRkZW5PbkRhc2hib2FyZCIsImdlb21ldHJ5X3R5cGVzIiwiX2dlb21ldHJ5VHlwZXMiLCJnZW9tZXRyeV9yZXF1aXJlZCIsIl9nZW9tZXRyeVJlcXVpcmVkIiwic2NyaXB0IiwiX3NjcmlwdCIsImltYWdlIiwiX2ltYWdlIiwicHJvamVjdHNfZW5hYmxlZCIsIl9wcm9qZWN0RW5hYmxlZCIsImFzc2lnbm1lbnRfZW5hYmxlZCIsIl9hc3NpZ25tZW50RW5hYmxlZCIsInByb2plY3QiLCJyb2xlIiwiaXNfc3lzdGVtIiwiX2lzU3lzdGVtIiwiaXNfZGVmYXVsdCIsIl9pc0RlZmF1bHQiLCJjYW5fbWFuYWdlX3N1YnNjcmlwdGlvbiIsImNhbk1hbmFnZVN1YnNjcmlwdGlvbiIsImNhbl91cGRhdGVfb3JnYW5pemF0aW9uIiwiY2FuVXBkYXRlT3JnYW5pemF0aW9uIiwiY2FuX21hbmFnZV9tZW1iZXJzIiwiY2FuTWFuYWdlTWVtYmVycyIsImNhbl9tYW5hZ2Vfcm9sZXMiLCJjYW5NYW5hZ2VSb2xlcyIsImNhbl9tYW5hZ2VfYXBwcyIsImNhbk1hbmFnZUFwcHMiLCJjYW5fbWFuYWdlX3Byb2plY3RzIiwiY2FuTWFuYWdlUHJvamVjdHMiLCJjYW5fbWFuYWdlX2Nob2ljZV9saXN0cyIsImNhbk1hbmFnZUNob2ljZUxpc3RzIiwiY2FuX21hbmFnZV9jbGFzc2lmaWNhdGlvbl9zZXRzIiwiY2FuTWFuYWdlQ2xhc3NpZmljYXRpb25TZXRzIiwiY2FuX2NyZWF0ZV9yZWNvcmRzIiwiY2FuQ3JlYXRlUmVjb3JkcyIsImNhbl91cGRhdGVfcmVjb3JkcyIsImNhblVwZGF0ZVJlY29yZHMiLCJjYW5fZGVsZXRlX3JlY29yZHMiLCJjYW5EZWxldGVSZWNvcmRzIiwiY2FuX2NoYW5nZV9zdGF0dXMiLCJjYW5DaGFuZ2VTdGF0dXMiLCJjYW5fY2hhbmdlX3Byb2plY3QiLCJjYW5DaGFuZ2VQcm9qZWN0IiwiY2FuX2Fzc2lnbl9yZWNvcmRzIiwiY2FuQXNzaWduUmVjb3JkcyIsImNhbl9pbXBvcnRfcmVjb3JkcyIsImNhbkltcG9ydFJlY29yZHMiLCJjYW5fZXhwb3J0X3JlY29yZHMiLCJjYW5FeHBvcnRSZWNvcmRzIiwiY2FuX3J1bl9yZXBvcnRzIiwiY2FuUnVuUmVwb3J0cyIsIm1lbWJlcnNoaXAiLCJ1c2VyX3Jlc291cmNlX2lkIiwiX3VzZXJJRCIsImZpcnN0X25hbWUiLCJfZmlyc3ROYW1lIiwibGFzdF9uYW1lIiwiX2xhc3ROYW1lIiwiZW1haWwiLCJfZW1haWwiLCJyb2xlX2lkIiwiX3JvbGVSb3dJRCIsInJvbGVfcmVzb3VyY2VfaWQiLCJfcm9sZUlEIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxTQUFOLENBQWdCO0FBQzdCO0FBQ0E7QUFDQSxTQUFPQyxlQUFQLENBQXVCQyxlQUF2QixFQUF3QztBQUN0QyxRQUFJQSxtQkFBbUIsSUFBdkIsRUFBNkI7QUFDM0IsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBUSxzREFBc0Qsd0JBQVMsSUFBVCxFQUFlLG9CQUFJQyxTQUFKLENBQWNELGVBQWQsQ0FBZixDQUFnRCxXQUE5RztBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFNBQU9FLG9CQUFQLENBQTRCRixlQUE1QixFQUE2QztBQUMzQyxRQUFJQSxtQkFBbUIsSUFBdkIsRUFBNkI7QUFDM0IsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBUSwrREFBK0Qsd0JBQVMsSUFBVCxFQUFlLG9CQUFJQyxTQUFKLENBQWNELGVBQWQsQ0FBZixDQUFnRCxZQUF2SDtBQUNEOztBQUVELFNBQU9HLFFBQVAsQ0FBZ0JDLFFBQWhCLEVBQTBCQyxTQUExQixFQUFxQztBQUNu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O0FBMEJMQyx1QkFBaUJsTCxJQUFJbUw7QUExQmhCLEtBQVA7QUE0QkQ7O0FBRUQsU0FBT0MsVUFBUCxDQUFrQnBMLEdBQWxCLEVBQXVCO0FBQ3JCLFdBQU87QUFDTEksY0FBUUosSUFBSUssS0FEUDtBQUVMQyx1QkFBaUJOLElBQUlPLEVBRmhCO0FBR0w4Syx3QkFBa0JyTCxJQUFJc0wsT0FIakI7QUFJTEMsa0JBQVl2TCxJQUFJd0wsVUFKWDtBQUtMQyxpQkFBV3pMLElBQUkwTCxTQUxWO0FBTUxuRixZQUFNLENBQUN2RyxJQUFJd0wsVUFBSixJQUFrQixFQUFuQixJQUF5QixHQUF6QixJQUFnQ3hMLElBQUkwTCxTQUFKLElBQWlCLEVBQWpELENBTkQ7QUFPTEMsYUFBTzNMLElBQUk0TCxNQVBOO0FBUUxDLGVBQVM3TCxJQUFJOEwsVUFSUjtBQVNMQyx3QkFBa0IvTCxJQUFJZ00sT0FUakI7QUFVTDFFLGNBQVF0SCxJQUFJc0gsTUFWUDtBQVdMeEYsa0JBQVk5QixJQUFJK0IsVUFYWDtBQVlMQyxrQkFBWWhDLElBQUlpQyxVQVpYO0FBYUw4RSxrQkFBWS9HLElBQUlnSDtBQWJYLEtBQVA7QUFlRDtBQTdSNEI7a0JBQVZuSSxTIiwiZmlsZSI6InNjaGVtYS1tYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGdmb3JtYXQgZnJvbSAncGctZm9ybWF0JztcbmltcG9ydCB3a3QgZnJvbSAnd2VsbGtub3duJztcbmltcG9ydCB7IGNvcmUgfSBmcm9tICdmdWxjcnVtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZW1hTWFwIHtcbiAgLy8gKiBmb3JjZSAyZFxuICAvLyAqIHJlbW92ZSBkdXBsaWNhdGUgdmVydGljZXNcbiAgc3RhdGljIGdlb21Gcm9tR2VvSlNPTihnZW9qc29uR2VvbWV0cnkpIHtcbiAgICBpZiAoZ2VvanNvbkdlb21ldHJ5ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBgU1RfUmVtb3ZlUmVwZWF0ZWRQb2ludHMoU1RfRm9yY2UyRChTVF9HZW9tRnJvbVRleHQoJHsgcGdmb3JtYXQoJyVMJywgd2t0LnN0cmluZ2lmeShnZW9qc29uR2VvbWV0cnkpKSB9LCA0MzI2KSkpYDtcbiAgfVxuXG4gIC8vICogZm9yY2UgdG8gbXVsdGlcbiAgLy8gKiBmb3JjZSAyZFxuICAvLyAqIHJlbW92ZSBkdXBsaWNhdGUgdmVydGljZXNcbiAgc3RhdGljIG11bHRpR2VvbUZyb21HZW9KU09OKGdlb2pzb25HZW9tZXRyeSkge1xuICAgIGlmIChnZW9qc29uR2VvbWV0cnkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBTVF9SZW1vdmVSZXBlYXRlZFBvaW50cyhTVF9Gb3JjZTJEKFNUX011bHRpKFNUX0dlb21Gcm9tVGV4dCgkeyBwZ2Zvcm1hdCgnJUwnLCB3a3Quc3RyaW5naWZ5KGdlb2pzb25HZW9tZXRyeSkpIH0sIDQzMjYpKSkpYDtcbiAgfVxuXG4gIHN0YXRpYyBnZW9tZXRyeShsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gICAgcmV0dXJuIHsgcmF3OiB0aGlzLmdlb21Gcm9tR2VvSlNPTih7dHlwZTogJ1BvaW50JywgY29vcmRpbmF0ZXM6IFsgK2xvbmdpdHVkZSwgK2xhdGl0dWRlIF19KSB9O1xuICB9XG5cbiAgc3RhdGljIHRyYWNrR2VvbWV0cnkodHJhY2tKU09OKSB7XG4gICAgaWYgKHRyYWNrSlNPTikge1xuICAgICAgY29uc3QgdHJhY2sgPSBuZXcgY29yZS5UcmFjaygndmlkZW8nLCB0cmFja0pTT04pO1xuXG4gICAgICBjb25zdCBnZW9KU09OID0gdHJhY2sudG9HZW9KU09OTXVsdGlMaW5lU3RyaW5nKCk7XG5cbiAgICAgIGlmIChnZW9KU09OICYmIGdlb0pTT04uZ2VvbWV0cnkgJiYgZ2VvSlNPTi5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggJiYgZ2VvSlNPTi5nZW9tZXRyeS5jb29yZGluYXRlc1swXS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB7IHJhdzogdGhpcy5tdWx0aUdlb21Gcm9tR2VvSlNPTihnZW9KU09OKSB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3RhdGljIHBob3RvKHJvdykge1xuICAgIGNvbnN0IGhhc0xvY2F0aW9uID0gcm93Ll9sYXRpdHVkZSAhPSBudWxsICYmIHJvdy5fbG9uZ2l0dWRlICE9IG51bGw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcm93X2lkOiByb3cucm93SUQsXG4gICAgICByb3dfcmVzb3VyY2VfaWQ6IHJvdy5pZCxcbiAgICAgIGFjY2Vzc19rZXk6IHJvdy5pZCxcbiAgICAgIHJlY29yZF9pZDogcm93Ll9yZWNvcmRSb3dJRCxcbiAgICAgIHJlY29yZF9yZXNvdXJjZV9pZDogcm93Ll9yZWNvcmRJRCxcbiAgICAgIGZvcm1faWQ6IHJvdy5fZm9ybVJvd0lELFxuICAgICAgZm9ybV9yZXNvdXJjZV9pZDogcm93Ll9mb3JtSUQsXG4gICAgICBleGlmOiByb3cuX2V4aWYgPyBKU09OLnN0cmluZ2lmeShyb3cuX2V4aWYpIDogbnVsbCxcbiAgICAgIGZpbGVfc2l6ZTogcm93Ll9maWxlU2l6ZSxcbiAgICAgIGNyZWF0ZWRfYnlfaWQ6IHJvdy5fY3JlYXRlZEJ5Um93SUQsXG4gICAgICBjcmVhdGVkX2J5X3Jlc291cmNlX2lkOiByb3cuX2NyZWF0ZWRCeUlELFxuICAgICAgdXBkYXRlZF9ieV9pZDogcm93Ll91cGRhdGVkQnlSb3dJRCxcbiAgICAgIHVwZGF0ZWRfYnlfcmVzb3VyY2VfaWQ6IHJvdy5fdXBkYXRlZEJ5SUQsXG4gICAgICBjcmVhdGVkX2F0OiByb3cuX2NyZWF0ZWRBdCxcbiAgICAgIHVwZGF0ZWRfYXQ6IHJvdy5fdXBkYXRlZEF0LFxuICAgICAgZmlsZTogcm93Ll9maWxlUGF0aCxcbiAgICAgIGNvbnRlbnRfdHlwZTogcm93Ll9jb250ZW50VHlwZSxcbiAgICAgIGlzX3VwbG9hZGVkOiByb3cuX2lzVXBsb2FkZWQsXG4gICAgICBpc19zdG9yZWQ6IHJvdy5faXNTdG9yZWQsXG4gICAgICBpc19wcm9jZXNzZWQ6IHJvdy5faXNQcm9jZXNzZWQsXG4gICAgICBnZW9tZXRyeTogaGFzTG9jYXRpb24gPyB0aGlzLmdlb21ldHJ5KHJvdy5fbGF0aXR1ZGUsIHJvdy5fbG9uZ2l0dWRlKSA6IG51bGwsXG4gICAgICBsYXRpdHVkZTogaGFzTG9jYXRpb24gPyByb3cuX2xhdGl0dWRlIDogbnVsbCxcbiAgICAgIGxvbmdpdHVkZTogaGFzTG9jYXRpb24gPyByb3cuX2xvbmdpdHVkZSA6IG51bGwsXG4gICAgICBhbHRpdHVkZTogcm93Ll9hbHRpdHVkZSxcbiAgICAgIGRpcmVjdGlvbjogcm93Ll9kaXJlY3Rpb24sXG4gICAgICBhY2N1cmFjeTogcm93Ll9hY2N1cmFjeSxcbiAgICAgIHdpZHRoOiByb3cuX3dpZHRoLFxuICAgICAgaGVpZ2h0OiByb3cuX2hlaWdodCxcbiAgICAgIG1ha2U6IHJvdy5fbWFrZSxcbiAgICAgIG1vZGVsOiByb3cuX21vZGVsLFxuICAgICAgc29mdHdhcmU6IHJvdy5fc29mdHdhcmUsXG4gICAgICBkYXRlX3RpbWU6IHJvdy5fZGF0ZVRpbWVcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHZpZGVvKHJvdykge1xuICAgIHJldHVybiB7XG4gICAgICByb3dfaWQ6IHJvdy5fcm93SUQsXG4gICAgICByb3dfcmVzb3VyY2VfaWQ6IHJvdy5pZCxcbiAgICAgIGFjY2Vzc19rZXk6IHJvdy5pZCxcbiAgICAgIHJlY29yZF9pZDogcm93Ll9yZWNvcmRSb3dJRCxcbiAgICAgIHJlY29yZF9yZXNvdXJjZV9pZDogcm93Ll9yZWNvcmRJRCxcbiAgICAgIGZvcm1faWQ6IHJvdy5fZm9ybVJvd0lELFxuICAgICAgZm9ybV9yZXNvdXJjZV9pZDogcm93Ll9mb3JtSUQsXG4gICAgICBtZXRhZGF0YTogcm93Ll9tZXRhZGF0YSxcbiAgICAgIGhhc190cmFjazogcm93Ll9oYXNUcmFjayxcbiAgICAgIHRyYWNrOiByb3cuX3RyYWNrSlNPTixcbiAgICAgIGZpbGVfc2l6ZTogcm93Ll9maWxlU2l6ZSxcbiAgICAgIGNyZWF0ZWRfYnlfaWQ6IHJvdy5fY3JlYXRlZEJ5Um93SUQsXG4gICAgICBjcmVhdGVkX2J5X3Jlc291cmNlX2lkOiByb3cuX2NyZWF0ZWRCeUlELFxuICAgICAgdXBkYXRlZF9ieV9pZDogcm93Ll91cGRhdGVkQnlSb3dJRCxcbiAgICAgIHVwZGF0ZWRfYnlfcmVzb3VyY2VfaWQ6IHJvdy5fdXBkYXRlZEJ5SUQsXG4gICAgICBjcmVhdGVkX2F0OiByb3cuX2NyZWF0ZWRBdCxcbiAgICAgIHVwZGF0ZWRfYXQ6IHJvdy5fdXBkYXRlZEF0LFxuICAgICAgZmlsZTogcm93Ll9maWxlUGF0aCxcbiAgICAgIGNvbnRlbnRfdHlwZTogcm93Ll9jb250ZW50VHlwZSxcbiAgICAgIGlzX3VwbG9hZGVkOiByb3cuX2lzVXBsb2FkZWQsXG4gICAgICBpc19zdG9yZWQ6IHJvdy5faXNTdG9yZWQsXG4gICAgICBpc19wcm9jZXNzZWQ6IHJvdy5faXNQcm9jZXNzZWQsXG4gICAgICBnZW9tZXRyeTogdGhpcy50cmFja0dlb21ldHJ5KHJvdy5fdHJhY2tKU09OKSxcbiAgICAgIHdpZHRoOiByb3cuX3dpZHRoLFxuICAgICAgaGVpZ2h0OiByb3cuX2hlaWdodCxcbiAgICAgIGR1cmF0aW9uOiByb3cuX2R1cmF0aW9uLFxuICAgICAgYml0X3JhdGU6IHJvdy5fYml0UmF0ZVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgYXVkaW8ocm93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvd19pZDogcm93Ll9yb3dJRCxcbiAgICAgIHJvd19yZXNvdXJjZV9pZDogcm93LmlkLFxuICAgICAgYWNjZXNzX2tleTogcm93LmlkLFxuICAgICAgcmVjb3JkX2lkOiByb3cuX3JlY29yZFJvd0lELFxuICAgICAgcmVjb3JkX3Jlc291cmNlX2lkOiByb3cuX3JlY29yZElELFxuICAgICAgZm9ybV9pZDogcm93Ll9mb3JtUm93SUQsXG4gICAgICBmb3JtX3Jlc291cmNlX2lkOiByb3cuX2Zvcm1JRCxcbiAgICAgIG1ldGFkYXRhOiByb3cuX21ldGFkYXRhLFxuICAgICAgaGFzX3RyYWNrOiByb3cuX2hhc1RyYWNrLFxuICAgICAgdHJhY2s6IHJvdy5fdHJhY2tKU09OLFxuICAgICAgZmlsZV9zaXplOiByb3cuX2ZpbGVTaXplLFxuICAgICAgY3JlYXRlZF9ieV9pZDogcm93Ll9jcmVhdGVkQnlSb3dJRCxcbiAgICAgIGNyZWF0ZWRfYnlfcmVzb3VyY2VfaWQ6IHJvdy5fY3JlYXRlZEJ5SUQsXG4gICAgICB1cGRhdGVkX2J5X2lkOiByb3cuX3VwZGF0ZWRCeVJvd0lELFxuICAgICAgdXBkYXRlZF9ieV9yZXNvdXJjZV9pZDogcm93Ll91cGRhdGVkQnlJRCxcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvdy5fY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZF9hdDogcm93Ll91cGRhdGVkQXQsXG4gICAgICBmaWxlOiByb3cuX2ZpbGVQYXRoLFxuICAgICAgY29udGVudF90eXBlOiByb3cuX2NvbnRlbnRUeXBlLFxuICAgICAgaXNfdXBsb2FkZWQ6IHJvdy5faXNVcGxvYWRlZCxcbiAgICAgIGlzX3N0b3JlZDogcm93Ll9pc1N0b3JlZCxcbiAgICAgIGlzX3Byb2Nlc3NlZDogcm93Ll9pc1Byb2Nlc3NlZCxcbiAgICAgIGdlb21ldHJ5OiB0aGlzLnRyYWNrR2VvbWV0cnkocm93Ll90cmFja0pTT04pLFxuICAgICAgZHVyYXRpb246IHJvdy5fZHVyYXRpb24sXG4gICAgICBiaXRfcmF0ZTogcm93Ll9iaXRSYXRlXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBjaGFuZ2VzZXQocm93KSB7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21Gcm9tR2VvSlNPTihyb3cuYm91bmRpbmdCb3hBc0dlb0pTT04pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJvd19pZDogcm93LnJvd0lELFxuICAgICAgcm93X3Jlc291cmNlX2lkOiByb3cuaWQsXG4gICAgICBmb3JtX2lkOiByb3cuX2Zvcm1Sb3dJRCxcbiAgICAgIGZvcm1fcmVzb3VyY2VfaWQ6IHJvdy5fZm9ybUlELFxuICAgICAgbWV0YWRhdGE6IHJvdy5fbWV0YWRhdGEsXG4gICAgICBjbG9zZWRfYXQ6IHJvdy5fY2xvc2VkQXQsXG4gICAgICBjcmVhdGVkX2J5X2lkOiByb3cuX2NyZWF0ZWRCeVJvd0lELFxuICAgICAgY3JlYXRlZF9ieV9yZXNvdXJjZV9pZDogcm93Ll9jcmVhdGVkQnlJRCxcbiAgICAgIHVwZGF0ZWRfYnlfaWQ6IHJvdy5fdXBkYXRlZEJ5Um93SUQsXG4gICAgICB1cGRhdGVkX2J5X3Jlc291cmNlX2lkOiByb3cuX3VwZGF0ZWRCeUlELFxuICAgICAgY2xvc2VkX2J5X2lkOiByb3cuX2Nsb3NlZEJ5Um93SUQsXG4gICAgICBjbG9zZWRfYnlfcmVzb3VyY2VfaWQ6IHJvdy5fY2xvc2VkQnlJRCxcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvdy5fY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZF9hdDogcm93Ll91cGRhdGVkQXQsXG4gICAgICBtaW5fbGF0OiByb3cuX21pbkxhdCxcbiAgICAgIG1heF9sYXQ6IHJvdy5fbWF4TGF0LFxuICAgICAgbWluX2xvbjogcm93Ll9taW5Mb24sXG4gICAgICBtYXhfbG9uOiByb3cuX21heExvbixcbiAgICAgIG51bWJlcl9vZl9jaGFuZ2VzOiByb3cuX251bWJlck9mQ2hhbmdlcyxcbiAgICAgIG51bWJlcl9vZl9jcmVhdGVzOiByb3cuX251bWJlck9mQ3JlYXRlcyxcbiAgICAgIG51bWJlcl9vZl91cGRhdGVzOiByb3cuX251bWJlck9mVXBkYXRlZCxcbiAgICAgIG51bWJlcl9vZl9kZWxldGVzOiByb3cuX251bWJlck9mRGVsZXRlcyxcbiAgICAgIG1ldGFkYXRhX2luZGV4X3RleHQ6IHJvdy5fbWV0YWRhdGFJbmRleFRleHQsXG4gICAgICBtZXRhZGF0YV9pbmRleDoge3JhdzogYHRvX3RzdmVjdG9yKCR7IHBnZm9ybWF0KCclTCcsIHJvdy5fbWV0YWRhdGFJbmRleFRleHQpIH0pYH0sXG4gICAgICBib3VuZGluZ19ib3g6IGdlb21ldHJ5ID8ge3JhdzogdGhpcy5nZW9tRnJvbUdlb0pTT04ocm93LmJvdW5kaW5nQm94QXNHZW9KU09OKX0gOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBjaG9pY2VMaXN0KHJvdykge1xuICAgIHJldHVybiB7XG4gICAgICByb3dfaWQ6IHJvdy5yb3dJRCxcbiAgICAgIHJvd19yZXNvdXJjZV9pZDogcm93LmlkLFxuICAgICAgbmFtZTogcm93Ll9uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHJvdy5fZGVzY3JpcHRpb24sXG4gICAgICB2ZXJzaW9uOiByb3cuX3ZlcnNpb24sXG4gICAgICBpdGVtczogcm93Ll9jaG9pY2VzSlNPTixcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvdy5fY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZF9hdDogcm93Ll91cGRhdGVkQXQsXG4gICAgICBkZWxldGVkX2F0OiByb3cuX2RlbGV0ZWRBdFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgY2xhc3NpZmljYXRpb25TZXQocm93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvd19pZDogcm93LnJvd0lELFxuICAgICAgcm93X3Jlc291cmNlX2lkOiByb3cuaWQsXG4gICAgICBuYW1lOiByb3cuX25hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogcm93Ll9kZXNjcmlwdGlvbixcbiAgICAgIHZlcnNpb246IHJvdy5fdmVyc2lvbixcbiAgICAgIGl0ZW1zOiByb3cuX2l0ZW1zSlNPTixcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvdy5fY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZF9hdDogcm93Ll91cGRhdGVkQXQsXG4gICAgICBkZWxldGVkX2F0OiByb3cuX2RlbGV0ZWRBdFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZm9ybShyb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm93X2lkOiByb3cucm93SUQsXG4gICAgICByb3dfcmVzb3VyY2VfaWQ6IHJvdy5pZCxcbiAgICAgIG5hbWU6IHJvdy5fbmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiByb3cuX2Rlc2NyaXB0aW9uLFxuICAgICAgdmVyc2lvbjogcm93Ll92ZXJzaW9uLFxuICAgICAgZWxlbWVudHM6IHJvdy5fZWxlbWVudHMsXG4gICAgICBzdGF0dXM6IHJvdy5fc3RhdHVzLFxuICAgICAgc3RhdHVzX2ZpZWxkOiByb3cuX3N0YXR1c0ZpZWxkSlNPTixcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvdy5fY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZF9hdDogcm93Ll91cGRhdGVkQXQsXG4gICAgICBkZWxldGVkX2F0OiByb3cuX2RlbGV0ZWRBdCxcbiAgICAgIGF1dG9fYXNzaWduOiByb3cuX2F1dG9Bc3NpZ24sXG4gICAgICB0aXRsZV9maWVsZF9rZXlzOiByb3cuX3RpdGxlRmllbGRLZXlzLFxuICAgICAgaGlkZGVuX29uX2Rhc2hib2FyZDogcm93Ll9oaWRkZW5PbkRhc2hib2FyZCxcbiAgICAgIGdlb21ldHJ5X3R5cGVzOiByb3cuX2dlb21ldHJ5VHlwZXMsXG4gICAgICBnZW9tZXRyeV9yZXF1aXJlZDogcm93Ll9nZW9tZXRyeVJlcXVpcmVkLFxuICAgICAgc2NyaXB0OiByb3cuX3NjcmlwdCxcbiAgICAgIGltYWdlOiByb3cuX2ltYWdlLFxuICAgICAgcHJvamVjdHNfZW5hYmxlZDogISFyb3cuX3Byb2plY3RFbmFibGVkLFxuICAgICAgYXNzaWdubWVudF9lbmFibGVkOiAhIXJvdy5fYXNzaWdubWVudEVuYWJsZWRcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHByb2plY3Qocm93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvd19pZDogcm93LnJvd0lELFxuICAgICAgcm93X3Jlc291cmNlX2lkOiByb3cuaWQsXG4gICAgICBuYW1lOiByb3cuX25hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogcm93Ll9kZXNjcmlwdGlvbixcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvdy5fY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZF9hdDogcm93Ll91cGRhdGVkQXQsXG4gICAgICBkZWxldGVkX2F0OiByb3cuX2RlbGV0ZWRBdFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcm9sZShyb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm93X2lkOiByb3cucm93SUQsXG4gICAgICByb3dfcmVzb3VyY2VfaWQ6IHJvdy5pZCxcbiAgICAgIG5hbWU6IHJvdy5fbmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiByb3cuX2Rlc2NyaXB0aW9uLFxuICAgICAgY3JlYXRlZF9hdDogcm93Ll9jcmVhdGVkQXQsXG4gICAgICB1cGRhdGVkX2F0OiByb3cuX3VwZGF0ZWRBdCxcbiAgICAgIGRlbGV0ZWRfYXQ6IHJvdy5fZGVsZXRlZEF0LFxuICAgICAgaXNfc3lzdGVtOiByb3cuX2lzU3lzdGVtLFxuICAgICAgaXNfZGVmYXVsdDogcm93Ll9pc0RlZmF1bHQsXG4gICAgICBjYW5fbWFuYWdlX3N1YnNjcmlwdGlvbjogcm93LmNhbk1hbmFnZVN1YnNjcmlwdGlvbixcbiAgICAgIGNhbl91cGRhdGVfb3JnYW5pemF0aW9uOiByb3cuY2FuVXBkYXRlT3JnYW5pemF0aW9uLFxuICAgICAgY2FuX21hbmFnZV9tZW1iZXJzOiByb3cuY2FuTWFuYWdlTWVtYmVycyxcbiAgICAgIGNhbl9tYW5hZ2Vfcm9sZXM6IHJvdy5jYW5NYW5hZ2VSb2xlcyxcbiAgICAgIGNhbl9tYW5hZ2VfYXBwczogcm93LmNhbk1hbmFnZUFwcHMsXG4gICAgICBjYW5fbWFuYWdlX3Byb2plY3RzOiByb3cuY2FuTWFuYWdlUHJvamVjdHMsXG4gICAgICBjYW5fbWFuYWdlX2Nob2ljZV9saXN0czogcm93LmNhbk1hbmFnZUNob2ljZUxpc3RzLFxuICAgICAgY2FuX21hbmFnZV9jbGFzc2lmaWNhdGlvbl9zZXRzOiByb3cuY2FuTWFuYWdlQ2xhc3NpZmljYXRpb25TZXRzLFxuICAgICAgY2FuX2NyZWF0ZV9yZWNvcmRzOiByb3cuY2FuQ3JlYXRlUmVjb3JkcyxcbiAgICAgIGNhbl91cGRhdGVfcmVjb3Jkczogcm93LmNhblVwZGF0ZVJlY29yZHMsXG4gICAgICBjYW5fZGVsZXRlX3JlY29yZHM6IHJvdy5jYW5EZWxldGVSZWNvcmRzLFxuICAgICAgY2FuX2NoYW5nZV9zdGF0dXM6IHJvdy5jYW5DaGFuZ2VTdGF0dXMsXG4gICAgICBjYW5fY2hhbmdlX3Byb2plY3Q6IHJvdy5jYW5DaGFuZ2VQcm9qZWN0LFxuICAgICAgY2FuX2Fzc2lnbl9yZWNvcmRzOiByb3cuY2FuQXNzaWduUmVjb3JkcyxcbiAgICAgIGNhbl9pbXBvcnRfcmVjb3Jkczogcm93LmNhbkltcG9ydFJlY29yZHMsXG4gICAgICBjYW5fZXhwb3J0X3JlY29yZHM6IHJvdy5jYW5FeHBvcnRSZWNvcmRzLFxuICAgICAgY2FuX3J1bl9yZXBvcnRzOiByb3cuY2FuUnVuUmVwb3J0c1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgbWVtYmVyc2hpcChyb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm93X2lkOiByb3cucm93SUQsXG4gICAgICByb3dfcmVzb3VyY2VfaWQ6IHJvdy5pZCxcbiAgICAgIHVzZXJfcmVzb3VyY2VfaWQ6IHJvdy5fdXNlcklELFxuICAgICAgZmlyc3RfbmFtZTogcm93Ll9maXJzdE5hbWUsXG4gICAgICBsYXN0X25hbWU6IHJvdy5fbGFzdE5hbWUsXG4gICAgICBuYW1lOiAocm93Ll9maXJzdE5hbWUgfHwgJycpICsgJyAnICsgKHJvdy5fbGFzdE5hbWUgfHwgJycpLFxuICAgICAgZW1haWw6IHJvdy5fZW1haWwsXG4gICAgICByb2xlX2lkOiByb3cuX3JvbGVSb3dJRCxcbiAgICAgIHJvbGVfcmVzb3VyY2VfaWQ6IHJvdy5fcm9sZUlELFxuICAgICAgc3RhdHVzOiByb3cuc3RhdHVzLFxuICAgICAgY3JlYXRlZF9hdDogcm93Ll9jcmVhdGVkQXQsXG4gICAgICB1cGRhdGVkX2F0OiByb3cuX3VwZGF0ZWRBdCxcbiAgICAgIGRlbGV0ZWRfYXQ6IHJvdy5fZGVsZXRlZEF0XG4gICAgfTtcbiAgfVxufVxuIl19